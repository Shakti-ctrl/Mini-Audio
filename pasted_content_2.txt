import asyncio
import time
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import ImportChatInviteRequest, ForwardMessagesRequest
from telethon.errors import FloodWaitError, MessageIdInvalidError
import os

================= CONFIG =================

api_id = 28403662
api_hash = '079509d4ac7f209a1a58facd00d6ff5a'

source_channel = 'https://t.me/arjunaa_neet_25'
group_invite = 'Fep9YbeAlNM5ZmU1'

session_name = 'forwarder_session'
progress_file = 'last_id.txt'

============== Progress Save/Load ==============

def save_last_id(last_id):
with open(progress_file, 'w') as f:
f.write(str(last_id))

def load_last_id():
if os.path.exists(progress_file):
with open(progress_file, 'r') as f:
return int(f.read().strip())
return 0

============== Main Logic ==============

async def main():
async with TelegramClient(session_name, api_id, api_hash) as client:
print("‚úÖ Connected to Telegram")

try:  
        target = await client(ImportChatInviteRequest(group_invite))  
        print("‚úÖ Joined group via invite link")  
    except:  
        target = await client.get_entity(f'https://t.me/+{group_invite}')  
        print("‚úÖ Already a member of the group")  

    source = await client.get_entity(source_channel)  
    last_id = load_last_id()  
    print(f"‚ñ∂Ô∏è Resuming from message ID: {last_id + 1}")  

    count = 0  
    async for message in client.iter_messages(source, min_id=last_id, reverse=True):  
        if not message or not message.message:  
            continue  # skip non-text or service messages  

        try:  
            await client(ForwardMessagesRequest(  
                from_peer=source,  
                id=[message.id],  
                to_peer=target  
            ))  
            print(f"‚úÖ Forwarded: {message.id}")  
            save_last_id(message.id)  
            count += 1  
            await asyncio.sleep(1.5)  

        except FloodWaitError as e:  
            print(f"‚è≥ Flood wait: {e.seconds} seconds. Waiting...")  
            time.sleep(e.seconds + 5)  
            continue  

        except MessageIdInvalidError:  
            print(f"‚ö†Ô∏è Skipped invalid message ID: {message.id}")  
            continue  

        except Exception as e:  
            print(f"‚ùå Unknown error on message {message.id}: {e}")  
            break  

    if count == 0:  
        print("‚úÖ Nothing to forward or already done.")  
    else:  
        print(f"üéâ Done. Forwarded {count} messages.")

============== RUN ==============

asyncio.run(main()) are you able to see that if I would compare to the term and how it will work if you know in the same manner just create a flask based that will do the same thing exactly same but it will some advance feature first make the a single bot.py everything should be in a single and it must so first when I search that telegram channel it shows all that's video with files messages and images then I will select it then I will tap on the button extract then it will so in the in the progress bar that and they will be the option to select all as well and so this features I need and they will be

